{
  "_args": [
    [
      "assemblyscript@github:assemblyscript/assemblyscript#v0.6",
      "/home/shc/contracts/eos_storage_WP_plugin/node_modules/rabin-wasm"
    ]
  ],
  "_from": "assemblyscript/assemblyscript#v0.6",
  "_id": "assemblyscript@0.6.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/assemblyscript",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/assemblyscript/assemblyscript/v0.6/package.json",
      "gitUrl": "git://github.com/assemblyscript/assemblyscript.git#v0.6",
      "httpsUrl": "git+https://github.com/assemblyscript/assemblyscript.git#v0.6",
      "shortcut": "github:assemblyscript/assemblyscript#v0.6",
      "ssh": "git@github.com:assemblyscript/assemblyscript.git#v0.6",
      "sshUrl": "git+ssh://git@github.com/assemblyscript/assemblyscript.git#v0.6",
      "type": "github"
    },
    "name": "assemblyscript",
    "raw": "assemblyscript@github:assemblyscript/assemblyscript#v0.6",
    "rawSpec": "github:assemblyscript/assemblyscript#v0.6",
    "scope": null,
    "spec": "github:assemblyscript/assemblyscript#v0.6",
    "type": "hosted"
  },
  "_requiredBy": [
    "/rabin-wasm"
  ],
  "_resolved": "git://github.com/assemblyscript/assemblyscript.git#3ed76a97f05335504166fce1653da75f4face28f",
  "_shasum": "529d0c795597df7829a78f5403b4b02aed6dd1e8",
  "_shrinkwrap": null,
  "_spec": "assemblyscript@github:assemblyscript/assemblyscript#v0.6",
  "_where": "/home/shc/contracts/eos_storage_WP_plugin/node_modules/rabin-wasm",
  "author": {
    "email": "dcode+assemblyscript@dcode.io",
    "name": "Daniel Wirtz"
  },
  "bin": {
    "asc": "bin/asc",
    "asinit": "bin/asinit"
  },
  "bugs": {
    "url": "https://github.com/AssemblyScript/assemblyscript/issues"
  },
  "collective": {
    "type": "opencollective",
    "url": "https://opencollective.com/assemblyscript"
  },
  "dependencies": {
    "@protobufjs/utf8": "^1.1.0",
    "binaryen": "77.0.0-nightly.20190407",
    "glob": "^7.1.3",
    "long": "^4.0.0",
    "opencollective-postinstall": "^2.0.0",
    "source-map-support": "^0.5.11"
  },
  "description": "![](https://avatars1.githubusercontent.com/u/28916798?s=64) AssemblyScript =================",
  "devDependencies": {
    "@types/node": "^11.13.0",
    "browser-process-hrtime": "^1.0.0",
    "diff": "^4.0.1",
    "ts-loader": "^5.3.3",
    "ts-node": "^6.2.0",
    "tslint": "^5.15.0",
    "typedoc": "^0.14.0",
    "typedoc-plugin-external-module-name": "^2.0.0",
    "typescript": "^3.4.2",
    "webpack": "^4.29.6",
    "webpack-cli": "^3.3.0"
  },
  "engines": {
    "node": ">=8"
  },
  "files": [
    "LICENSE",
    "NOTICE",
    "README.md",
    "bin/",
    "cli/",
    "dist/",
    "index.d.ts",
    "index.js",
    "lib/loader/README.md",
    "lib/loader/index.d.ts",
    "lib/loader/index.js",
    "package-lock.json",
    "package.json",
    "src/",
    "std/",
    "tsconfig-base.json"
  ],
  "gitHead": "3ed76a97f05335504166fce1653da75f4face28f",
  "homepage": "https://github.com/AssemblyScript/assemblyscript#readme",
  "license": "Apache-2.0",
  "main": "index.js",
  "name": "assemblyscript",
  "optionalDependencies": {},
  "readme": "![](https://avatars1.githubusercontent.com/u/28916798?s=64) AssemblyScript\n=================\n\n[![Build Status](https://travis-ci.org/AssemblyScript/assemblyscript.svg?branch=master)](https://travis-ci.org/AssemblyScript/assemblyscript)\n\n**AssemblyScript** compiles strictly typed [TypeScript](http://www.typescriptlang.org) (basically JavaScript with types) to [WebAssembly](http://webassembly.org) using [Binaryen](https://github.com/WebAssembly/binaryen). It generates lean and mean WebAssembly modules while being just an `npm install` away.\n\nTry it out in [WebAssembly Studio](https://webassembly.studio)!\n\n---\n\n<h3 align=\"center\">Our Sponsors</h2>\n<p align=\"center\">\n  <a href=\"https://opencollective.com/assemblyscript/tiers/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/assemblyscript/tiers/sponsor/0/avatar.svg\"></a>\n  <a href=\"https://opencollective.com/assemblyscript/tiers/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/assemblyscript/tiers/sponsor/1/avatar.svg\"></a>\n  <a href=\"https://opencollective.com/assemblyscript/tiers/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/assemblyscript/tiers/sponsor/2/avatar.svg\"></a>\n  <a href=\"https://opencollective.com/assemblyscript/tiers/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/assemblyscript/tiers/sponsor/3/avatar.svg\"></a>\n  <a href=\"https://opencollective.com/assemblyscript/tiers/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/assemblyscript/tiers/sponsor/4/avatar.svg\"></a>\n  <a href=\"https://opencollective.com/assemblyscript/tiers/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/assemblyscript/tiers/sponsor/5/avatar.svg\"></a>\n  <a href=\"https://opencollective.com/assemblyscript/tiers/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/assemblyscript/tiers/sponsor/6/avatar.svg\"></a>\n  <a href=\"https://opencollective.com/assemblyscript/tiers/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/assemblyscript/tiers/sponsor/7/avatar.svg\"></a>\n  <a href=\"https://opencollective.com/assemblyscript/tiers/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/assemblyscript/tiers/sponsor/8/avatar.svg\"></a>\n  <a href=\"https://opencollective.com/assemblyscript/tiers/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/assemblyscript/tiers/sponsor/9/avatar.svg\"></a>\n</p>\n<br />\n<h3 align=\"center\">Our Backers</h2>\n<p align=\"center\">\n  <a href=\"https://opencollective.com/assemblyscript#backers\" target=\"_blank\"><img src=\"https://opencollective.com/assemblyscript/backer.svg?avatarHeight=44\" /></a>\n</p>\n\nThe core team members and most contributors do this open source work in their free time. If you use AssemblyScript for a serious task or plan to do so, and you'd like us to invest more time on it, [please donate to our OpenCollective](https://opencollective.com/assemblyscript). By sponsoring this project, your logo will show up above. Thank you so much for your support!\n\n---\n\nMotivation\n----------\n\n> AssemblyScript was frictionless. Not only does it allow you to use TypeScript to write WebAssembly, [...] it also produces glue-free WebAssembly modules that are very small with decent performance. – Surma, [Replacing a hot path in your app's JavaScript with WebAssembly](https://developers.google.com/web/updates/2019/02/hotpath-with-wasm) (Feb 16, 2019)\n\n> Perhaps the fundamental issue [to get a small .wasm file] is that JavaScript is the only language for which the Web runtime is a perfect fit. Close relatives that were designed to compile to it, like TypeScript, can be very efficient as well. But languages like C, C++, Rust, and so forth were not originally designed for that purpose. – Alon Zakai, [Small WebAssembly Binaries with Rust + Emscripten](https://kripken.github.io/blog/binaryen/2018/04/18/rust-emscripten.html) (Apr 18, 2018)\n\n> JavaScript's heyday as the only browser language is over, but most web developers are used to writing JavaScript, and learning a new syntax just to get access to WebAssembly is not (always) ideal. If only there was something in to bridge the gap… – Jani Tarvainen, [TypeScript is the bridge between JavaScript and WebAssembly](https://malloc.fi/typescript-bridge-javascript-webassembly) (Feb 20, 2018)\n\n> I do think [compiling TypeScript into WASM] is tremendously useful. It allows JavaScript developers to create WASM modules without having to learn C. – Colin Eberhardt, [Exploring different approaches to building WebAssembly modules](http://blog.scottlogic.com/2017/10/17/wasm-mandelbrot.html) (Oct 17, 2017)\n\nGetting started\n---------------\n\nAll the details are provided in the [AssemblyScript wiki](https://github.com/AssemblyScript/assemblyscript/wiki) - make sure to pay it a visit. With that being said, the easiest way to get started with AssemblyScript is to point npm at the GitHub repository (for now)\n\n```\n$> npm install --save-dev AssemblyScript/assemblyscript\n```\n\nfollowed by [scaffolding](https://github.com/AssemblyScript/assemblyscript/wiki/Using-the-CLI#scaffolding-with-asinit) a new project including the necessary configuration files, for example in the current directory:\n\n```\n$> npx asinit .\n```\n\nOnce the project is set up, it's just a matter of using your existing [TypeScript tooling](https://code.visualstudio.com) while coding, and [using the CLI](https://github.com/AssemblyScript/assemblyscript/wiki/Using-the-CLI) to build to WebAssembly, either manually, or using (and maybe modifying) the generated build task in the generated `package.json`:\n\n```\n$> npm run asbuild\n```\n\nThe CLI API can also [be used programmatically](./cli).\n\nIf you rather prefer an installation suitable for development, pretty much the same can be achieved by cloning the GitHub repository instead:\n\n```\n$> git clone https://github.com/AssemblyScript/assemblyscript.git\n$> cd assemblyscript\n$> npm install\n$> npm link\n```\n\n**Note** that a fresh clone of the compiler will use the distribution files in `dist/`, but it can also run [the sources](./src) directly through ts-node after an `npm run clean`, which is useful in development. This condition can also be checked by running `asc -v` (it is running the sources if it states `-dev`).\n\nExamples\n--------\n\n* **[Conway's Game of Life](./examples/game-of-life)** [ [demo](https://assemblyscript.github.io/assemblyscript/examples/game-of-life) | [fiddle](https://webassembly.studio/?f=gvuw4enb3qk) ]<br />\n  Continuously updates the cellular automaton and visualizes its state on a canvas.\n\n* **[Mandelbrot Set](./examples/mandelbrot)** [ [demo](https://assemblyscript.github.io/assemblyscript/examples/mandelbrot) | [fiddle](https://webassembly.studio/?f=m6hbiw9wyq) ]<br />\n  Renders the Mandelbrot set to a canvas.\n\n* **[i64 polyfill](./examples/i64-polyfill)**<br />\n  Exposes WebAssembly's i64 operations to JavaScript using 32-bit integers (low and high bits).\n\n* **[PSON decoder](./examples/pson)**<br />\n  A simple decoder for the PSON binary format.\n\n* **[WASM parser](./lib/parse)**<br />\n  A WebAssembly binary parser in WebAssembly.\n\n* **[N-body system](./examples/n-body)** [ [demo](https://assemblyscript.github.io/assemblyscript/examples/n-body) ]<br />\n  An implementation of the N-body system from the [Computer Language Benchmarks Game](https://benchmarksgame-team.pages.debian.net/benchmarksgame/).\n\nBuilding\n--------\n\nTo build an UMD bundle to `dist/assemblyscript.js` (depends on [binaryen.js](https://github.com/AssemblyScript/binaryen.js)), including a browser version of asc to `dist/asc.js` (depends on assemblyscript.js):\n\n```\n$> npm run build\n```\n\nCleaning the distribution files (again):\n\n```\n$> npm run clean\n```\n\nLinting potential changes:\n\n```\n$> npm run check\n```\n\nRunning the [tests](./tests):\n\n```\n$> npm test\n```\n\nRunning everything in order (lint, clean, test, build, test):\n\n```\n$> npm run all\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/AssemblyScript/assemblyscript.git"
  },
  "scripts": {
    "all": "npm run check && npm run make",
    "build": "webpack --mode production --display-modules",
    "check": "npm run check:config && npm run check:compiler && npm run check:library",
    "check:compiler": "tslint -c tslint.json --project src --formatters-dir lib/lint/formatters --format as",
    "check:config": "tsc --noEmit -p src --diagnostics --listFiles",
    "check:library": "tslint -c tslint.json --project std/assembly --formatters-dir lib/lint/formatters --format as",
    "clean": "node scripts/clean",
    "docs": "typedoc --tsconfig tsconfig-docs.json --mode modules --name \"AssemblyScript Compiler API\" --out ./docs/api --ignoreCompilerErrors --excludeNotExported --excludePrivate --excludeExternals --exclude **/std/** --includeDeclarations --readme src/README.md",
    "make": "npm run clean && npm test && npm run build && npm test",
    "postinstall": "opencollective-postinstall || exit 0",
    "test": "npm run test:parser && npm run test:compiler",
    "test:compiler": "node tests/compiler",
    "test:parser": "node tests/parser"
  },
  "types": "index.d.ts",
  "version": "0.6.0"
}
